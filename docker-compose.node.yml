# this docker configuration assumes that all implementations are written with Node 16
# and layed out within a `services` folder and have a project named after the service, e.g. `services/FoodPreparation/package.json`
# it assumes that there exists a `npm run start` command which starts the service
version: "3.9"
networks:
    restaurant-kata:
services:
    Customer:
        image: mcr.microsoft.com/dotnet/sdk:6.0
        ports:
        - "8080:8080"
        restart: unless-stopped
        volumes:
        - ./customer:/var/www/html:rw#
        depends_on:
        - RabbitMQ
        environment:
        - ASPNETCORE_URLS=http://+:8080
        - APIs__GuestExperience=http://GuestExperience:8081/
        - APIS__TableService=http://TableService:8082/
        - APIS__Billing=http://Billing:8083/
        working_dir: /var/www/html
        entrypoint: dotnet run --no-launch-profile
        networks:
        - restaurant-kata

    FoodPreparation:
        image: node:16
        ports:
        - "8085:8085"
        env_file:
        -   ".env"
        healthcheck:
            test: curl -f http://localhost:8085/health || exit 1
            interval: ${HC_INTERVAL}
            timeout: ${HC_TIMEOUT}
            retries: ${HC_RETRIES}
            start_period: ${HC_START_PERIOD}
        restart: unless-stopped
        volumes:
        - ./services/FoodPreparation:/services
        depends_on:
        - RabbitMQ
        environment:
            PORT: ${FOOD_PREP_PORT}
            API_DELIVERY: ${API_DELIVERY}
            BUSY_COOK: ${BUSY_COOK}
        working_dir: /services
        command: bash -c "npm install && npm run start"
        networks:
        - restaurant-kata

    GuestExperience:
        image: node:16
        ports:
        - "8081:8081"
        env_file:
        -   ".env"
        healthcheck:
            test: curl -f http://localhost:8081/health || exit 1
            interval: ${HC_INTERVAL}
            timeout: ${HC_TIMEOUT}
            retries: ${HC_RETRIES}
            start_period: ${HC_START_PERIOD}
        restart: unless-stopped
        volumes:
        - ./services/GuestExperience:/services
        working_dir: /services
        depends_on:
        - FoodPreparation
        - RabbitMQ
        environment:
            PORT: ${GUEST_EXP_PORT}
            API_FOODPREPERATION: ${API_FOOD_PREP}
            OVERWORKED_MANAGER: ${OVERWORKED_MANAGER}
            OVERWORKED_MANAGER_DELAY: ${OVERWORKED_MANAGER_DELAY}
        command: bash -c "npm install && npm run start"
        networks:
        - restaurant-kata

    Delivery:
        image: node:16
        ports:
        - "8084:8084"
        env_file:
        -   ".env"
        healthcheck:
            test: curl -f http://localhost:8084/health || exit 1
            interval: ${HC_INTERVAL}
            timeout: ${HC_TIMEOUT}
            retries: ${HC_RETRIES}
            start_period: ${HC_START_PERIOD}
        restart: unless-stopped
        volumes:
        - ./services/Delivery:/services
        working_dir: /services
        depends_on:
        - RabbitMQ
        environment:
            PORT: ${DELIVERY_PORT}
            API_CUSTOMER: ${API_CUSTOMER}
            API_BILLING: ${API_BILLING}
            SLOW_DELIVERY: ${SLOW_DELIVERY}
            SLOW_DELIVERY_DELAY: ${SLOW_DELIVERY_DELAY}
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
        command: bash -c "npm install && npm run start"
        networks:
        - restaurant-kata

    Billing:
        image: node:16
        ports:
        - "8083:8083"
        env_file:
        -   ".env"
        healthcheck:
            test: curl -f http://localhost:8083/health || exit 1
            interval: ${HC_INTERVAL}
            timeout: ${HC_TIMEOUT}
            retries: ${HC_RETRIES}
            start_period: ${HC_START_PERIOD}
        restart: unless-stopped
        volumes:
        - ./services/Billing:/services
        working_dir: /services
        depends_on:
        - GuestExperience
        - RabbitMQ
        environment:
            PORT: ${BILLING_PORT}
            API_GUEST_EXPERIENCE: ${API_GUEST_EXP}
            BUSY_THRESHOLD: ${BUSY_THRESHOLD}
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
        command: bash -c "npm install && npm run start"
        networks:
        - restaurant-kata

    TableService:
        image: node:16
        ports:
        - "8082:8082"
        env_file:
        -   ".env"
        healthcheck:
            test: curl -f http://localhost:8082/health || exit 1
            interval: ${HC_INTERVAL}
            timeout: ${HC_TIMEOUT}
            retries: ${HC_RETRIES}
            start_period: ${HC_START_PERIOD}
        restart: unless-stopped
        volumes:
        - ./services/TableService:/services
        working_dir: /services
        command: bash -c "npm install && npm run start"
        networks:
        - restaurant-kata
        depends_on:
        - RabbitMQ
        environment:
            PORT: ${TABLE_SERVICE_PORT}
            API_DELIVERY: ${API_DELIVERY}
            API_FOODPREPERATION: ${API_FOOD_PREP}
            FORGETTABLE_WAITER_RATIO: ${FORGETTABLE_WAITER_RATIO}

    RabbitMQ:
        image: rabbitmq:3.11-management-alpine
        environment:
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
        ports:
        - "5672:5672"
        - "15672:15672"
        env_file:
        -   ".env"
        healthcheck:
            test: rabbitmq-diagnostics -q ping || exit 1
            interval: ${HC_INTERVAL}
            timeout: ${HC_TIMEOUT}
            retries: ${HC_RETRIES}
            start_period: ${HC_START_PERIOD}
        restart: unless-stopped
        volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
        networks:
        - restaurant-kata

volumes:
    rabbitmq-data:
