/*
 * Guest experience
 *
 * Provides a menu with daily offers tailored to customers, which is compliant to the legal rules of the country. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Api.GuestExperience.Model
{
    /// <summary>
    /// Menu
    /// </summary>
    [DataContract(Name = "menu")]
    public partial class Menu : IEquatable<Menu>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Menu" /> class.
        /// </summary>
        /// <param name="guest">guest.</param>
        /// <param name="food">food.</param>
        /// <param name="drinks">drinks.</param>
        public Menu(int guest = default(int), List<MenuItem> food = default(List<MenuItem>), List<MenuItem> drinks = default(List<MenuItem>))
        {
            this.Guest = guest;
            this.Food = food;
            this.Drinks = drinks;
        }

        /// <summary>
        /// Gets or Sets Guest
        /// </summary>
        [DataMember(Name = "guest", EmitDefaultValue = false)]
        public int Guest { get; set; }

        /// <summary>
        /// Gets or Sets Food
        /// </summary>
        [DataMember(Name = "food", EmitDefaultValue = false)]
        public List<MenuItem> Food { get; set; }

        /// <summary>
        /// Gets or Sets Drinks
        /// </summary>
        [DataMember(Name = "drinks", EmitDefaultValue = false)]
        public List<MenuItem> Drinks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Menu {\n");
            sb.Append("  Guest: ").Append(Guest).Append("\n");
            sb.Append("  Food: ").Append(Food).Append("\n");
            sb.Append("  Drinks: ").Append(Drinks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Menu);
        }

        /// <summary>
        /// Returns true if Menu instances are equal
        /// </summary>
        /// <param name="input">Instance of Menu to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Menu input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Guest == input.Guest ||
                    this.Guest.Equals(input.Guest)
                ) && 
                (
                    this.Food == input.Food ||
                    this.Food != null &&
                    input.Food != null &&
                    this.Food.SequenceEqual(input.Food)
                ) && 
                (
                    this.Drinks == input.Drinks ||
                    this.Drinks != null &&
                    input.Drinks != null &&
                    this.Drinks.SequenceEqual(input.Drinks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Guest.GetHashCode();
                if (this.Food != null)
                    hashCode = hashCode * 59 + this.Food.GetHashCode();
                if (this.Drinks != null)
                    hashCode = hashCode * 59 + this.Drinks.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Guest (int) minimum
            if(this.Guest < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Guest, must be a value greater than or equal to 0.", new [] { "Guest" });
            }

            yield break;
        }
    }

}
