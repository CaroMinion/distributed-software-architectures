/*
 * Billing
 *
 * Keeps track of ordered items in the restaurant and offers a guest a possibility to pay their bills with different payment methods. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Api.Billing.Model
{
    /// <summary>
    /// Contains items of an order that have been paid
    /// </summary>
    [DataContract(Name = "paidOrder")]
    public partial class PaidOrder : IEquatable<PaidOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaidOrder" /> class.
        /// </summary>
        /// <param name="order">order.</param>
        /// <param name="paidDrinks">paidDrinks.</param>
        /// <param name="paidFood">paidFood.</param>
        public PaidOrder(int order = default(int), List<int> paidDrinks = default(List<int>), List<int> paidFood = default(List<int>))
        {
            this.Order = order;
            this.PaidDrinks = paidDrinks;
            this.PaidFood = paidFood;
        }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public int Order { get; set; }

        /// <summary>
        /// Gets or Sets PaidDrinks
        /// </summary>
        [DataMember(Name = "paidDrinks", EmitDefaultValue = false)]
        public List<int> PaidDrinks { get; set; }

        /// <summary>
        /// Gets or Sets PaidFood
        /// </summary>
        [DataMember(Name = "paidFood", EmitDefaultValue = false)]
        public List<int> PaidFood { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaidOrder {\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  PaidDrinks: ").Append(PaidDrinks).Append("\n");
            sb.Append("  PaidFood: ").Append(PaidFood).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaidOrder);
        }

        /// <summary>
        /// Returns true if PaidOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of PaidOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaidOrder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Order == input.Order ||
                    this.Order.Equals(input.Order)
                ) && 
                (
                    this.PaidDrinks == input.PaidDrinks ||
                    this.PaidDrinks != null &&
                    input.PaidDrinks != null &&
                    this.PaidDrinks.SequenceEqual(input.PaidDrinks)
                ) && 
                (
                    this.PaidFood == input.PaidFood ||
                    this.PaidFood != null &&
                    input.PaidFood != null &&
                    this.PaidFood.SequenceEqual(input.PaidFood)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.PaidDrinks != null)
                    hashCode = hashCode * 59 + this.PaidDrinks.GetHashCode();
                if (this.PaidFood != null)
                    hashCode = hashCode * 59 + this.PaidFood.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Order (int) minimum
            if(this.Order < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Order, must be a value greater than or equal to 0.", new [] { "Order" });
            }

            yield break;
        }
    }

}
