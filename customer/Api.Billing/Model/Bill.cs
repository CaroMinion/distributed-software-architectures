/*
 * Billing
 *
 * Keeps track of ordered items in the restaurant and offers a guest a possibility to pay their bills with different payment methods. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Api.Billing.Model
{
    /// <summary>
    /// Bill
    /// </summary>
    [DataContract(Name = "bill")]
    public partial class Bill : IEquatable<Bill>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Bill" /> class.
        /// </summary>
        /// <param name="bill">bill.</param>
        /// <param name="orderedDrinks">orderedDrinks.</param>
        /// <param name="orderedFood">orderedFood.</param>
        /// <param name="totalSum">Euros.</param>
        public Bill(int bill = default(int), List<int> orderedDrinks = default(List<int>), List<int> orderedFood = default(List<int>), decimal totalSum = default(decimal))
        {
            this._Bill = bill;
            this.OrderedDrinks = orderedDrinks;
            this.OrderedFood = orderedFood;
            this.TotalSum = totalSum;
        }

        /// <summary>
        /// Gets or Sets _Bill
        /// </summary>
        [DataMember(Name = "bill", EmitDefaultValue = false)]
        public int _Bill { get; set; }

        /// <summary>
        /// Gets or Sets OrderedDrinks
        /// </summary>
        [DataMember(Name = "orderedDrinks", EmitDefaultValue = false)]
        public List<int> OrderedDrinks { get; set; }

        /// <summary>
        /// Gets or Sets OrderedFood
        /// </summary>
        [DataMember(Name = "orderedFood", EmitDefaultValue = false)]
        public List<int> OrderedFood { get; set; }

        /// <summary>
        /// Euros
        /// </summary>
        /// <value>Euros</value>
        [DataMember(Name = "totalSum", EmitDefaultValue = false)]
        public decimal TotalSum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Bill {\n");
            sb.Append("  _Bill: ").Append(_Bill).Append("\n");
            sb.Append("  OrderedDrinks: ").Append(OrderedDrinks).Append("\n");
            sb.Append("  OrderedFood: ").Append(OrderedFood).Append("\n");
            sb.Append("  TotalSum: ").Append(TotalSum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Bill);
        }

        /// <summary>
        /// Returns true if Bill instances are equal
        /// </summary>
        /// <param name="input">Instance of Bill to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Bill input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._Bill == input._Bill ||
                    this._Bill.Equals(input._Bill)
                ) && 
                (
                    this.OrderedDrinks == input.OrderedDrinks ||
                    this.OrderedDrinks != null &&
                    input.OrderedDrinks != null &&
                    this.OrderedDrinks.SequenceEqual(input.OrderedDrinks)
                ) && 
                (
                    this.OrderedFood == input.OrderedFood ||
                    this.OrderedFood != null &&
                    input.OrderedFood != null &&
                    this.OrderedFood.SequenceEqual(input.OrderedFood)
                ) && 
                (
                    this.TotalSum == input.TotalSum ||
                    this.TotalSum.Equals(input.TotalSum)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this._Bill.GetHashCode();
                if (this.OrderedDrinks != null)
                    hashCode = hashCode * 59 + this.OrderedDrinks.GetHashCode();
                if (this.OrderedFood != null)
                    hashCode = hashCode * 59 + this.OrderedFood.GetHashCode();
                hashCode = hashCode * 59 + this.TotalSum.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // _Bill (int) minimum
            if(this._Bill < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for _Bill, must be a value greater than or equal to 0.", new [] { "_Bill" });
            }

            // TotalSum (decimal) minimum
            if(this.TotalSum < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalSum, must be a value greater than or equal to 0.", new [] { "TotalSum" });
            }

            yield break;
        }
    }

}
